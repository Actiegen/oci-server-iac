name: Terraform OCI Provision

on:
  push:
    branches:
      - main

env:
  TF_VAR_availability_domain: ${{ vars.TF_VAR_availability_domain }}
  TF_VAR_compartment_id: ${{ secrets.TF_VAR_compartment_id }}
  TF_VAR_shape: ${{ vars.TF_VAR_shape }}
  TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_ssh_public_key }}
  TF_VAR_source_image_id: ${{ secrets.TF_VAR_source_image_id }}
  TF_VAR_display_name: ${{ vars.TF_VAR_display_name }}
  TF_VAR_namespace: ${{ secrets.TF_VAR_namespace }}
  TF_VAR_tenancy_ocid: ${{ secrets.TF_VAR_tenancy_ocid }}
  TF_VAR_user_ocid: ${{ secrets.TF_VAR_user_ocid }}
  TF_VAR_fingerprint: ${{ secrets.TF_VAR_fingerprint }}
  TF_VAR_private_key: ${{ secrets.TF_VAR_private_key }}
  TF_VAR_ssh_private_key: ${{ secrets.TF_VAR_ssh_private_key }}
  TF_VAR_region: ${{ vars.TF_VAR_region }}
  TF_VAR_auth: ${{ vars.TF_VAR_auth }}
  WG_HOST: ${{ secrets.WG_HOST }}

jobs:

  prepare:
    name: 🧪 Prepare Terraform & Ansible
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: |
          terraform init \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="tenancy_ocid=${{ env.TF_VAR_tenancy_ocid }}" \
            -backend-config="user_ocid=${{ env.TF_VAR_user_ocid }}" \
            -backend-config="fingerprint=${{ env.TF_VAR_fingerprint }}" \
            -backend-config="private_key=${{ env.TF_VAR_private_key }}"

      - name: Terraform validate
        run: terraform validate

      - name: Terraform format
        run: terraform fmt -check -diff

      - name: Ansible lint
        uses: ansible/ansible-lint@v25.6.1
        with:
          working_directory: ansible/

  plan:
    name: 🔍 Terraform plan
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="tenancy_ocid=${{ env.TF_VAR_tenancy_ocid }}" \
            -backend-config="user_ocid=${{ env.TF_VAR_user_ocid }}" \
            -backend-config="fingerprint=${{ env.TF_VAR_fingerprint }}" \
            -backend-config="private_key=${{ env.TF_VAR_private_key }}"

      - name: Terraform Plan
        run: terraform plan

  apply:
    name: 🚀 Terraform apply (need approval)
    runs-on: ubuntu-latest
    needs: plan
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="tenancy_ocid=${{ env.TF_VAR_tenancy_ocid }}" \
            -backend-config="user_ocid=${{ env.TF_VAR_user_ocid }}" \
            -backend-config="fingerprint=${{ env.TF_VAR_fingerprint }}" \
            -backend-config="private_key=${{ env.TF_VAR_private_key }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve
  configure:
    name: 🔧 Ansible configure
    runs-on: ubuntu-latest
    needs: apply

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: |
          terraform init \
            -backend-config="region=${{ env.TF_VAR_region }}" \
            -backend-config="tenancy_ocid=${{ env.TF_VAR_tenancy_ocid }}" \
            -backend-config="user_ocid=${{ env.TF_VAR_user_ocid }}" \
            -backend-config="fingerprint=${{ env.TF_VAR_fingerprint }}" \
            -backend-config="private_key=${{ env.TF_VAR_private_key }}"
      
      - name: Update Ansible inventory
        id: ansible-host
        run: |
          IP=$(terraform output -raw instance_public_ip)
          echo "public_ip=${IP}" >> $GITHUB_OUTPUT

      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v4
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          WG_HOST: ${{ steps.ansible-host.outputs.public_ip }}
        with:
          playbook: ansible/playbook.yml
          inventory: |
            [oci-server]
            ${{ steps.ansible-host.outputs.public_ip }} ansible_user=ubuntu
          key: ${{ env.TF_VAR_ssh_public_key }}

      # - name: Generate Ansible inventory
      #   run: |
      #     IP=$(terraform output -raw instance_public_ip)
      #     echo "public_ip=${IP}" >> $GITHUB_OUTPUT
      #     cat > ansible/inventory.yml <<EOF
      #     all:
      #       hosts:
      #         oci-server:
      #           ansible_host: $IP
      #           ansible_user: ubuntu
      #     EOF

      #     echo "Conteúdo do inventory.yml:"
      #     cat ansible/inventory.yml
      # - name: Instala o Ansible
      #   run: |
      #     sudo apt update
      #     sudo apt install -y ansible

      # - name: Cria arquivo de chave privada
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ env.TF_VAR_ssh_private_key }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa

      # - name: Executa playbook Ansible
      #   env:
      #       ANSIBLE_HOST_KEY_CHECKING: False
      #   run: |
      #     ansible-playbook -i ansible/inventory.yml ansible/playbook.yml

